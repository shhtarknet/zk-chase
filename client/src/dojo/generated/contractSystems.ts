/* Autogenerated file. Do not edit manually. */

import { DojoProvider } from "@dojoengine/core";
import { Config } from "../../../dojo.config.ts";
import { Account, UniversalDetails, shortString } from "starknet";

export interface Signer {
  account: Account;
}

export interface Signup extends Signer {
  name: string;
}

export interface Rename extends Signer {
  name: string;
}

export interface Create extends Signer {}

export interface Join extends Signer {
  gameId: number;
}

export interface Move extends Signer {
  direction: number;
}

export type IWorld = Awaited<ReturnType<typeof setupWorld>>;

export const getContractByName = (manifest: any, name: string) => {
  const contract = manifest.contracts.find((contract: any) =>
    contract.tag.includes("::" + name),
  );
  if (contract) {
    return contract.address;
  } else {
    return "";
  }
};

export async function setupWorld(provider: DojoProvider, config: Config) {
  const namespace = "zkchase";
  const details: UniversalDetails | undefined = undefined; // { maxFee: 1e15 };

  function actions() {
    const contract_name = "actions";
    const contract = config.manifest.contracts.find((c: any) =>
      c.tag.includes(contract_name),
    );
    if (!contract) {
      throw new Error(`Contract ${contract_name} not found in manifest`);
    }

    const signup = async ({ account, name }: Signup) => {
      try {
        const encoded_name = shortString.encodeShortString(name);
        return await provider.execute(
          account,
          {
            contractName: contract_name,
            entrypoint: "signup",
            calldata: [encoded_name],
          },
          namespace,
          details,
        );
      } catch (error) {
        console.error("Error executing create:", error);
        throw error;
      }
    };

    const rename = async ({ account, name }: Rename) => {
      try {
        const encoded_name = shortString.encodeShortString(name);
        return await provider.execute(
          account,
          {
            contractName: contract_name,
            entrypoint: "rename",
            calldata: [encoded_name],
          },
          namespace,
          details,
        );
      } catch (error) {
        console.error("Error executing rename:", error);
        throw error;
      }
    };

    const create = async ({ account }: Create) => {
      try {
        return await provider.execute(
          account,
          {
            contractName: contract_name,
            entrypoint: "create",
            calldata: [],
          },

          namespace,
          details,
        );
      } catch (error) {
        console.error("Error executing create:", error);
        throw error;
      }
    };

    const join = async ({ account, gameId }: Join) => {
      try {
        return await provider.execute(
          account,
          {
            contractName: contract_name,
            entrypoint: "join",
            calldata: [gameId],
          },
          namespace,
          details,
        );
      } catch (error) {
        console.error("Error executing join:", error);
        throw error;
      }
    };

    const move = async ({ account, direction }: Move) => {
      try {
        return await provider.execute(
          account,
          {
            contractName: contract_name,
            entrypoint: "move",
            calldata: [direction],
          },
          namespace,
          details,
        );
      } catch (error) {
        console.error("Error executing move:", error);
        throw error;
      }
    };

    return {
      address: contract.address,
      signup,
      rename,
      create,
      join,
      move,
    };
  }

  return {
    actions: actions(),
  };
}
